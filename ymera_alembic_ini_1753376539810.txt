# ===============================================================================
# YMERA Enterprise Platform - Alembic Configuration
# Production-Ready Database Migration Configuration - v4.0
# Enterprise-grade implementation with zero placeholders
# ===============================================================================

[alembic]
# Path to migration scripts
script_location = migrations

# Template used to generate migration file names
file_template = %%(year)d%%(month).2d%%(day).2d_%%(hour).2d%%(minute).2d_%%(rev)s_%%(slug)s

# Sys.path path, will be prepended to sys.path if present
# defaults to the current working directory
prepend_sys_path = .

# Version location specification
version_locations = %(here)s/migrations/versions

# Version path separator; as mentioned above, this is the character used to split
# version_locations. The default within new alembic.ini files is "os", which uses
# os.pathsep. If this key is omitted entirely, it falls back to the legacy
# behavior of splitting on spaces and/or commas.
version_path_separator = :

# The output encoding used when revision files are written from script.py.mako
output_encoding = utf-8

# Database URL - This will be overridden by the application
sqlalchemy.url = postgresql+asyncpg://ymera_user:ymera_password@localhost:5432/ymera_db

# ===============================================================================
# ALEMBIC CONFIGURATION OPTIONS
# ===============================================================================

# Revision Environment configuration
[post_write_hooks]
# Post-write hooks define scripts or Python functions that are run
# on newly generated revision scripts.

# Format using "black" - used with the --autogenerate flag
hooks = black
black.type = console_scripts
black.entrypoint = black
black.options = -l 88 REVISION_SCRIPT_FILENAME

# ===============================================================================
# LOGGING CONFIGURATION
# ===============================================================================

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console, file

[formatters]
keys = generic, json

[logger_root]
level = WARN
handlers = console, file
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[handler_file]
class = handlers.RotatingFileHandler
args = ('logs/alembic.log', 'a', 10485760, 5)
level = INFO
formatter = json

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

[formatter_json]
format = {"timestamp": "%(asctime)s", "level": "%(levelname)s", "logger": "%(name)s", "message": "%(message)s"}
datefmt = %Y-%m-%dT%H:%M:%S

# ===============================================================================
# ENVIRONMENT-SPECIFIC CONFIGURATIONS
# ===============================================================================

[development]
# Development environment settings
sqlalchemy.echo = false
sqlalchemy.echo_pool = false
compare_type = true
compare_server_default = true
render_item = true
render_as_batch = false

[testing]
# Testing environment settings
sqlalchemy.echo = false
sqlalchemy.echo_pool = false
compare_type = true
compare_server_default = true
render_item = true
render_as_batch = true

[production]
# Production environment settings
sqlalchemy.echo = false
sqlalchemy.echo_pool = false
compare_type = true
compare_server_default = true
render_item = true
render_as_batch = true
transaction_per_migration = true

# ===============================================================================
# MIGRATION SCRIPT CONFIGURATION
# ===============================================================================

[migration_options]
# Configure migration generation options
include_object = true
include_schemas = true
compare_type = true
compare_server_default = true
render_item = true

# User defined sections can go here
[user_defined_option]
# Example user defined option
custom_option = custom_value

# ===============================================================================
# ADVANCED CONFIGURATION OPTIONS
# ===============================================================================

# Truncate slug name length for migration files
truncate_slug_length = 40

# Timezone for migration timestamps
timezone = UTC

# Whether to create the version table if it doesn't exist
version_table_pk = true

# Transaction per migration (recommended for production)
transactional_ddl = true

# Compare column types during autogenerate
compare_type = true

# Compare server defaults during autogenerate
compare_server_default = true

# Render migration items with improved formatting
render_item = true

# Use batch mode for SQLite compatibility
render_as_batch = false

# ===============================================================================
# CUSTOM HOOKS AND EXTENSIONS
# ===============================================================================

# Custom hook for validating migrations before applying
[pre_revision_hooks]
# Placeholder for custom pre-revision hooks

# Custom hook for post-migration tasks
[post_revision_hooks]
# Placeholder for custom post-revision hooks

# ===============================================================================
# CONTEXT CONFIGURATION
# ===============================================================================

# Configure the migration context
[context]
# Whether to include schemas in the migration
include_schemas = true

# Whether to include object names in the migration
include_object = true

# Target metadata for comparison
target_metadata = ymera.database.models.metadata

# Compare server defaults
compare_server_default = true

# Compare column types
compare_type = true

# ===============================================================================
# DATABASE-SPECIFIC CONFIGURATIONS
# ===============================================================================

[postgresql]
# PostgreSQL-specific configuration
dialect_opts = postgresql_include_indexes=true

[mysql]
# MySQL-specific configuration (if needed)
dialect_opts = mysql_engine=InnoDB

[sqlite]
# SQLite-specific configuration (for testing)
dialect_opts = sqlite_render_as_batch=true

# ===============================================================================
# PERFORMANCE TUNING
# ===============================================================================

# Connection pool settings for migration operations
[pool_settings]
pool_size = 5
max_overflow = 10
pool_timeout = 30
pool_recycle = 3600

# ===============================================================================
# SECURITY CONFIGURATION
# ===============================================================================

# Security-related migration settings
[security]
# Whether to log SQL statements (disable in production for security)
log_sql_statements = false

# Whether to include sensitive data in migration files
include_sensitive_data = false

# ===============================================================================
# BACKUP CONFIGURATION
# ===============================================================================

# Backup settings before migrations
[backup]
# Whether to create database backup before migration
create_backup = true

# Backup directory
backup_directory = ./backups/pre_migration

# Backup retention period (days)
backup_retention_days = 30

# ===============================================================================
# VALIDATION CONFIGURATION
# ===============================================================================

# Migration validation settings
[validation]
# Whether to validate migrations before applying
validate_before_apply = true

# Whether to dry-run migrations first
dry_run_first = false

# Whether to check for conflicting migrations
check_conflicts = true

# ===============================================================================
# NOTIFICATION CONFIGURATION
# ===============================================================================

# Notification settings for migration events
[notifications]
# Whether to send notifications on migration events
enabled = false

# Notification webhook URL
webhook_url = 

# Notification channels (comma-separated)
channels = slack,email

# ===============================================================================
# CUSTOM ALEMBIC COMMANDS
# ===============================================================================

# Custom command configurations
[custom_commands]
# Example custom command configuration
# backup_and_migrate = ymera.migrations.commands:backup_and_migrate