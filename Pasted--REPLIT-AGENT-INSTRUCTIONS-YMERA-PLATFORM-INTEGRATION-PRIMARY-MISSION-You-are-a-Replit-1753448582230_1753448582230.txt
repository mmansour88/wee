# REPLIT AGENT INSTRUCTIONS - YMERA PLATFORM INTEGRATION

## 🎯 **PRIMARY MISSION**
You are a Replit AI agent tasked with efficiently setting up Phase 1-2 of YMERA Platform, validating functionality, then integrating Phase 3 (AI Agents) ONLY after explicit user confirmation.

## 🚨 **CRITICAL WORKFLOW - FOLLOW EXACTLY**

### **STEP 1: WAIT FOR USER CONFIRMATION** ⏸️
```
DO NOT START ANY WORK UNTIL USER CONFIRMS:
✅ "All Phase 1-2 files uploaded"  
✅ "Logo file uploaded"
✅ "Ready to begin setup"

RESPOND WITH: "Confirmed. Phase 1-2 files and logo received. Beginning streamlined setup..."
```

### **STEP 2: RAPID SETUP SEQUENCE** ⚡ (15 minutes maximum)

**2.1 CRITICAL: Check Existing Architecture First (1 minute)**
```bash
# BEFORE installing anything, check what's already there:
ls -la server/
ls -la client/
cat package.json | grep -A5 -B5 "dependencies"

# Check if Hono or Express is already configured
grep -r "hono\|express" server/ || echo "No server framework found"
```

**2.2 Environment Setup (3 minutes)**
```bash
# ONLY install missing dependencies - DO NOT mix frameworks
# If Express exists, use Express. If Hono exists, use Hono. DO NOT MIX!

# For Express setup:
npm install express cors helmet morgan multer jsonwebtoken bcryptjs 
npm install @types/express @types/node @types/jsonwebtoken @types/multer @types/cors
npm install socket.io redis pg sequelize
npm install --save-dev typescript nodemon concurrently

# For client (standard):
cd client && npm install react react-dom @types/react @types/react-dom
npm install vite @vitejs/plugin-react tailwindcss
cd ..
```

**2.3 CRITICAL: Server Framework Fix (3 minutes)**
```typescript
// PROBLEM: Mixing Hono with Node.js HTTP server causes "this.raw.headers.get is not a function"
// SOLUTION: Use ONE framework consistently

// If server/index.ts has Hono, use this pattern:
import { Hono } from 'hono'
import { serve } from '@hono/node-server'

const app = new Hono()
app.get('/health', (c) => c.json({ status: 'ok' }))
serve({ fetch: app.fetch, port: 5000 })

// If server/index.ts has Express, use this pattern:
import express from 'express'
const app = express()
app.get('/health', (req, res) => res.json({ status: 'ok' }))
app.listen(5000, '0.0.0.0')

// NEVER mix: new Hono() with createServer() - this breaks everything!
```

**2.4 Port Configuration Fix (2 minutes)**
```typescript
// PROBLEM: Replit port mapping confusion
// SOLUTION: Always bind to 0.0.0.0 and use environment PORT

const PORT = process.env.PORT || 5000;

// For Express:
app.listen(PORT, '0.0.0.0', () => {
  console.log(`YMERA Server running on http://0.0.0.0:${PORT}`);
});

// For Hono:
serve({ 
  fetch: app.fetch, 
  port: Number(PORT),
  hostname: '0.0.0.0'
});
```

**2.5 React JSX Transform Fix (2 minutes)**
```typescript
// PROBLEM: "Can't find variable: React" errors
// SOLUTION: Add React imports to ALL .tsx files

// Auto-fix all JSX files:
find client/src -name "*.tsx" -exec sed -i '1i import React from "react";' {} \;

// Or manually add to each .tsx file:
import React from 'react';

// Update vite.config.ts if accessible:
export default defineConfig({
  plugins: [react({ jsxRuntime: 'classic' })],
  server: { port: 3000, host: '0.0.0.0' },
  build: { outDir: 'dist', sourcemap: false }
});
```

**2.6 Development vs Production Fix (1 minute)**
```bash
# PROBLEM: Building for production when development server is expected
# SOLUTION: Use development mode, not production build

# FOR DEVELOPMENT (Replit default):
npm run dev  # This starts both client and server in dev mode

# NOT THIS (causes JSX transform issues):
cd client && npm run build  # Don't build for production
```

**2.7 Logo Integration (2 minutes)**
```typescript
// Create client/src/components/ymera-logo.tsx
import React from 'react';

export const YmeraLogo = () => (
  <div className="flex items-center">
    <div className="relative">
      <svg width="32" height="32" viewBox="0 0 100 100" className="animate-pulse">
        <defs>
          <linearGradient id="ymera-gradient">
            <stop offset="0%" stopColor="#FBBF24" />
            <stop offset="50%" stopColor="#2563EB" />
            <stop offset="100%" stopColor="#991B1B" />
          </linearGradient>
        </defs>
        <path d="M20,50 Q50,20 80,50 Q50,80 20,50" fill="url(#ymera-gradient)" />
      </svg>
    </div>
    <div className="ml-3">
      <h1 className="text-white text-xl font-bold">YMERA</h1>
      <p className="text-white/70 text-xs">by Mohamed Mansour</p>
    </div>
  </div>
);
```

**2.8 Quick Validation (1 minute)**
```bash
# Test server response (not curl - use browser):
echo "Test: http://localhost:5000/health"
echo "Should return JSON, not HTML"

# Check browser console:
echo "No 'Can't find variable: React' errors"
echo "No CORS errors"
```

### **STEP 3: VALIDATION REPORT** 📋 (2 minutes maximum)

**Create this exact report format:**
```
YMERA PHASE 1-2 VALIDATION REPORT
================================

✅ FRONTEND STATUS:
- React errors: NONE
- Logo display: WORKING  
- Dashboard load: SUCCESS
- TypeScript errors: <COUNT>

✅ BACKEND STATUS:
- Health endpoint: JSON ✓
- API endpoints: JSON ✓
- Database: CONNECTED
- Redis: CONNECTED

✅ INTEGRATION STATUS:
- Route order: CORRECT
- Static files: SERVING
- WebSocket: CONNECTED
- CORS: CONFIGURED

🔗 WORKING LINK: [Your Replit URL]

STATUS: READY FOR PHASE 3 ✅
```

### **STEP 4: WAIT FOR PHASE 3 CONFIRMATION** ⏸️
```
DO NOT PROCEED UNTIL USER CONFIRMS:
✅ "Phase 1-2 validation approved"
✅ "Phase 3 files uploaded" 
✅ "Begin Phase 3 integration"

THEN REQUEST: "Please share Phase 3 files now. I'll wait for your confirmation before starting integration."
```

## 🚫 **CRITICAL ERRORS TO AVOID:**

### **❌ FRAMEWORK MIXING ERROR**
```javascript
// WRONG - This breaks everything:
import { Hono } from 'hono';
import { createServer } from 'http';
const app = new Hono();
const server = createServer(app); // ❌ NEVER DO THIS

// RIGHT - Pick ONE framework:
// Option A: Pure Hono
import { Hono } from 'hono';
import { serve } from '@hono/node-server';
const app = new Hono();
serve({ fetch: app.fetch, port: 5000 });

// Option B: Pure Express  
import express from 'express';
const app = express();
app.listen(5000, '0.0.0.0');
```

### **❌ PORT BINDING ERROR**
```javascript
// WRONG - Causes "unreachable" errors:
app.listen(5000); // Missing hostname

// RIGHT - Always bind to 0.0.0.0:
app.listen(5000, '0.0.0.0');
```

### **❌ CORS MIDDLEWARE ERROR**
```javascript
// WRONG - Hono CORS with Node.js breaks:
import { cors } from 'hono/cors';
app.use(cors()); // ❌ Causes "this.raw.headers.get is not a function"

// RIGHT - Simple CORS headers:
app.use('*', (c, next) => {
  c.header('Access-Control-Allow-Origin', '*');
  return next();
});
```

### **❌ BUILD/DEV MODE ERROR**
```bash
# WRONG - Building when dev mode expected:
cd client && npm run build  # ❌ Causes JSX transform issues

# RIGHT - Use development mode:
npm run dev  # ✅ Runs both client and server in dev mode
```

### **❌ REACT IMPORT ERROR**
```typescript
// WRONG - Missing React import:
const Component = () => <div>Hello</div>; // ❌ "Can't find variable: React"

// RIGHT - Always import React:
import React from 'react';
const Component = () => <div>Hello</div>; // ✅ Works
```

## ⚡ **EFFICIENCY RULES:**

1. **Use provided code patterns exactly** - no modifications
2. **Install all dependencies in single commands** - no individual installs  
3. **Apply all fixes simultaneously** - no step-by-step debugging
4. **Build once, test once** - no rebuild cycles
5. **Report results immediately** - no extended testing

## 🎯 **SUCCESS CRITERIA:**

**Phase 1-2 is COMPLETE when:**
- Browser console shows 0 React errors
- All API endpoints return JSON (never HTML)
- Health check returns valid JSON response
- Dashboard displays with YMERA logo
- Working Replit URL provided

**Then STOP and wait for Phase 3 files.**

## 📞 **COMMUNICATION PROTOCOL:**

**If you encounter specific errors:**

1. **"this.raw.headers.get is not a function"**
   ```javascript
   // Remove Hono CORS middleware, use simple headers instead
   app.use('*', (c, next) => {
     c.header('Access-Control-Allow-Origin', '*');
     return next();
   });
   ```

2. **"Can't find variable: React"**
   ```bash
   # Add React imports to all JSX files
   find client/src -name "*.tsx" -exec sed -i '1i import React from "react";' {} \;
   ```

3. **Server "unreachable" despite running**
   ```javascript
   // Always bind to 0.0.0.0, not localhost
   app.listen(PORT, '0.0.0.0');  // Not just app.listen(PORT)
   ```

4. **"Module not found" for server dependencies**
   ```bash
   # Install exact dependencies for framework being used
   # Check first: grep -r "hono\|express" server/
   ```

5. **JSX transform errors after build**
   ```bash
   # Don't build for production, use dev mode
   npm run dev  # Not: cd client && npm run build
   ```

**When Phase 1-2 is complete:**
```
PHASE 1-2 COMPLETE ✅
Working Link: [URL]
Ready for Phase 3 files.
Awaiting your confirmation to proceed.
```

## 🔧 **EMERGENCY FIXES:**

**If React errors persist:**
```bash
find client/src -name "*.tsx" -exec sed -i '1i import React from "react";' {} \;
```

**If API returns HTML instead of JSON:**
```javascript
// Move this line BEFORE static file serving:
app.use('/api', routes);
```

**If build fails:**
```bash
rm -rf client/node_modules client/dist && cd client && npm install && npm run build
```

---

## 📋 **AGENT CHECKLIST:**

Before starting ANY work:
- [ ] User confirmed "files uploaded and ready"
- [ ] All Phase 1-2 files are accessible
- [ ] Logo file is available

During setup:
- [ ] All dependencies installed in batch
- [ ] All React imports added automatically  
- [ ] Server routes ordered correctly
- [ ] Frontend built successfully
- [ ] Logo integrated properly

Before requesting Phase 3:
- [ ] All validation tests pass
- [ ] Working URL confirmed
- [ ] Validation report provided
- [ ] User approval received

**REMEMBER: Speed and efficiency over perfection. Get Phase 1-2 working quickly, then wait for Phase 3 confirmation.**